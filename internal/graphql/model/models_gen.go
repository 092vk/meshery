// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type ControlPlane struct {
	Type    string                `json:"type"`
	Members []*ControlPlaneMember `json:"members"`
}

type ControlPlaneFilter struct {
	Type *MeshType `json:"type"`
}

type ControlPlaneMember struct {
	Name   string `json:"name"`
	Status string `json:"status"`
}

type MeshType string

const (
	MeshTypeAll             MeshType = "ALL"
	MeshTypeNone            MeshType = "NONE"
	MeshTypeIstio           MeshType = "ISTIO"
	MeshTypeLinkerd         MeshType = "LINKERD"
	MeshTypeConsul          MeshType = "CONSUL"
	MeshTypeOctarine        MeshType = "OCTARINE"
	MeshTypeTraefik         MeshType = "TRAEFIK"
	MeshTypeOpenservicemesh MeshType = "OPENSERVICEMESH"
	MeshTypeKuma            MeshType = "KUMA"
	MeshTypeNginxsm         MeshType = "NGINXSM"
	MeshTypeNetworksm       MeshType = "NETWORKSM"
	MeshTypeCitrixsm        MeshType = "CITRIXSM"
)

var AllMeshType = []MeshType{
	MeshTypeAll,
	MeshTypeNone,
	MeshTypeIstio,
	MeshTypeLinkerd,
	MeshTypeConsul,
	MeshTypeOctarine,
	MeshTypeTraefik,
	MeshTypeOpenservicemesh,
	MeshTypeKuma,
	MeshTypeNginxsm,
	MeshTypeNetworksm,
	MeshTypeCitrixsm,
}

func (e MeshType) IsValid() bool {
	switch e {
	case MeshTypeAll, MeshTypeNone, MeshTypeIstio, MeshTypeLinkerd, MeshTypeConsul, MeshTypeOctarine, MeshTypeTraefik, MeshTypeOpenservicemesh, MeshTypeKuma, MeshTypeNginxsm, MeshTypeNetworksm, MeshTypeCitrixsm:
		return true
	}
	return false
}

func (e MeshType) String() string {
	return string(e)
}

func (e *MeshType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MeshType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MeshType", str)
	}
	return nil
}

func (e MeshType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
