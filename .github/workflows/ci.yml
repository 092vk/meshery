name: Meshery
on:
  push:
    branches:
      - 'master'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'master'

jobs:
  golangci:
    name: golangci-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v1
        with:
          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.
          version: v1.29

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          # args: --issues-exit-code=0

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true
  server-tests:
    needs: [tests-ui, golangci, build-backend, build-ui]
    name: Server tests
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - name: Setup Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ secrets.GO_VERSION }}
    - name: Setup Cache
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-        
    - run: GOPROXY=direct GOSUMDB=off GO111MODULE=on go test -tags draft ./...
  build-backend:
    name: Backend build
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - name: Setup Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ secrets.GO_VERSION }}
    - name: Setup Cache
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-        
    - run: GOPROXY=direct GOSUMDB=off GO111MODULE=on go build -tags draft ./cmd/main.go
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: meshery
        path: ./main
  build-ui:
    name: UI build
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ secrets.NODE_VERSION }}
    - uses: actions/cache@v1
      with:
        path: |
          ~/.npm
          ~/.next/cache
        key: ${{ runner.os }}-node-${{ hashFiles('**/lockfiles') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - run: |
        cd ui
        npm i
        npm run build && npm run export
        cd ..
        cd provider-ui
        npm i
        npm run build && npm run export
  tests-ui:
    name: UI integration tests
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ secrets.NODE_VERSION }}
    - uses: actions/cache@v1
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/lockfiles') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - run: |
        cd ui
        npm i
        npm run ci-test-integration
        cd ..
        cd provider-ui
        npm i
        npm test
        cd ..
  tests-ui-e2e:
    needs: [build-backend, build-ui]
    name: UI end-to-end tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@master
        with:
          fetch-depth: 1
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: meshery
      - name: Setup go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ secrets.GO_VERSION }}
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ secrets.NODE_VERSION }}
      - uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/lockfiles') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-go-
      - name: Run backend
        env:
          SAAS_BASE_URL: http://localhost:9876
          PORT: 9081
          ADAPTER_URLS: "mesherylocal.layer5.io:10000 mesherylocal.layer5.io:10001 mesherylocal.layer5.io:10002 mesherylocal.layer5.io:10003 mesherylocal.layer5.io:10004 mesherylocal.layer5.io:10008 mesherylocal.layer5.io:10009"
        run: |
          chmod +x ./main
          ./main &
      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          working-directory: ui
          start: npm start
          wait-on: http://localhost:3000
          spec: cypress/integration/e2e/**/*
  mesheryctl_build:
    name: Mesheryctl build & release
    runs-on: macos-latest
    needs: [server-tests]
    steps:
    - name: Check out code
      uses: actions/checkout@master
    - name: Unshallow
      run: git fetch --prune --unshallow
    - name: Set up Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ secrets.GO_VERSION }}
    - name: Setup Cache
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-        
    - name: goreleaser WITHOUT tag
      uses: goreleaser/goreleaser-action@v1
      if: success() && startsWith(github.ref, 'refs/tags/') == false
      with:
        version: latest
        args: release --snapshot --skip-publish --rm-dist