// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type MapEdge struct {
	FromID *string `json:"fromID"`
	ToID   *string `json:"toID"`
}

type MapEdgeIdentifier struct {
	View *View `json:"view"`
}

type MapNode struct {
	ID       *string   `json:"id"`
	ParentID *string   `json:"parentID"`
	Metadata *MetaData `json:"metadata"`
	Details  *string   `json:"details"`
}

type MapNodeIdentifier struct {
	View *View `json:"view"`
}

type MetaData struct {
	Name      *string `json:"name"`
	Namespace *string `json:"namespace"`
	NodeType  *string `json:"nodeType"`
	UID       *string `json:"uid"`
}

type View string

const (
	ViewServicemeshview View = "SERVICEMESHVIEW"
	ViewWorkloadview    View = "WORKLOADVIEW"
)

var AllView = []View{
	ViewServicemeshview,
	ViewWorkloadview,
}

func (e View) IsValid() bool {
	switch e {
	case ViewServicemeshview, ViewWorkloadview:
		return true
	}
	return false
}

func (e View) String() string {
	return string(e)
}

func (e *View) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = View(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid View", str)
	}
	return nil
}

func (e View) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
